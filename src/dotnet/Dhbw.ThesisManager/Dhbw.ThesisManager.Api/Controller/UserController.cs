//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Dhbw.ThesisManager.Api
{
    using System = global::System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Dhbw.ThesisManager.Api.Models;
    using Dhbw.ThesisManager.Api.Models.Responses;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.ModelBinding;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IUserController
    {
        /// <summary>
        /// List all users
        /// </summary>
        /// <returns>Success</returns>
        Task<UserListResponse> UsersGETAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Create one or more users
        /// </summary>
        /// <remarks>
        /// Calling this endpoint will also generate a registration token resource for every user. Each registration token will be emailed to the respective user automatically.
        /// </remarks>
        /// <returns>Success. A list of all new user ids is returned. The order of users is retained from the request body array.</returns>
        Task<UserIdListResponse> UsersPOSTAsync(IEnumerable<UserCreationRequest> body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get information about a specific user
        /// </summary>
        /// <param name="userId">The user id</param>
        /// <param name="registration_token">A user's registration token. This allows requests to this endpoint for a user with the same registration_token without any authentication.</param>
        /// <returns>Success</returns>
        Task<UserResponse> UsersGET2Async(long userId, string registration_token, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update information for a specific user
        /// </summary>
        /// <param name="userId">The user id</param>
        /// <returns>Success. The newly updated user information is returned</returns>
        Task<UserResponse> UsersPUTAsync(long userId, User body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific user
        /// </summary>
        /// <param name="userId">The user id</param>
        /// <returns>Success</returns>
        Task<EmptyResponse> UsersDELETEAsync(long userId, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Route("api/v0")]
    public partial class UserController : ControllerBase
    {
        private IUserController _implementation;

        public UserController(IUserController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// List all users
        /// </summary>
        /// <returns>Success</returns>
        [HttpGet, Route("users")]
        public Task<UserListResponse> UsersGET(CancellationToken cancellationToken)
        {
            return _implementation.UsersGETAsync(cancellationToken);
        }

        /// <summary>
        /// Create one or more users
        /// </summary>
        /// <remarks>
        /// Calling this endpoint will also generate a registration token resource for every user. Each registration token will be emailed to the respective user automatically.
        /// </remarks>
        /// <returns>Success. A list of all new user ids is returned. The order of users is retained from the request body array.</returns>
        [HttpPost, Route("users")]
        public Task<UserIdListResponse> UsersPOST([FromBody] IEnumerable<UserCreationRequest> body, CancellationToken cancellationToken)
        {
            return _implementation.UsersPOSTAsync(body, cancellationToken);
        }

        /// <summary>
        /// Get information about a specific user
        /// </summary>
        /// <param name="userId">The user id</param>
        /// <param name="registration_token">A user's registration token. This allows requests to this endpoint for a user with the same registration_token without any authentication.</param>
        /// <returns>Success</returns>
        [HttpGet, Route("users/{userId}")]
        public Task<UserResponse> UsersGET2([BindRequired] long userId, [FromQuery] string registration_token, CancellationToken cancellationToken)
        {
            return _implementation.UsersGET2Async(userId, registration_token, cancellationToken);
        }

        /// <summary>
        /// Update information for a specific user
        /// </summary>
        /// <param name="userId">The user id</param>
        /// <returns>Success. The newly updated user information is returned</returns>
        [HttpPut, Route("users/{userId}")]
        public Task<UserResponse> UsersPUT([BindRequired] long userId, [FromBody] User body, CancellationToken cancellationToken)
        {
            return _implementation.UsersPUTAsync(userId, body, cancellationToken);
        }

        /// <summary>
        /// Delete a specific user
        /// </summary>
        /// <param name="userId">The user id</param>
        /// <returns>Success</returns>
        [HttpDelete, Route("users/{userId}")]
        public Task<EmptyResponse> UsersDELETE([BindRequired] long userId, CancellationToken cancellationToken)
        {
            return _implementation.UsersDELETEAsync(userId, cancellationToken);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IRegistrationController
    {
        /// <summary>
        /// Regenerate a specific user's registration token
        /// </summary>
        /// <remarks>
        /// This endpoint is used to regenerate a new registration token for a specific user that exists already. Calling this endpoint also causes the user to receive an email notification with the new registration token.
        /// </remarks>
        /// <param name="userId">The user id</param>
        /// <returns>Success</returns>
        Task<RegistrationTokenResponse> TokenAsync(long userId, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Route("api/v0")]
    public partial class RegistrationController : ControllerBase
    {
        private IRegistrationController _implementation;

        public RegistrationController(IRegistrationController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Regenerate a specific user's registration token
        /// </summary>
        /// <remarks>
        /// This endpoint is used to regenerate a new registration token for a specific user that exists already. Calling this endpoint also causes the user to receive an email notification with the new registration token.
        /// </remarks>
        /// <param name="userId">The user id</param>
        /// <returns>Success</returns>
        [HttpPost, Route("users/{userId}/regenerate_registration_token")]
        public Task<RegistrationTokenResponse> Token([BindRequired] long userId, CancellationToken cancellationToken)
        {
            return _implementation.TokenAsync(userId, cancellationToken);
        }
    }
}
