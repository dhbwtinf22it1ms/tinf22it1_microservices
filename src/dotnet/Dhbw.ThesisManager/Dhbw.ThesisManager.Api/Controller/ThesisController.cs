//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Dhbw.ThesisManager.Api
{
    using System = global::System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Dhbw.ThesisManager.Api.Models;
    using Dhbw.ThesisManager.Api.Models.Responses;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.ModelBinding;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IThesisController
    {
        /// <summary>
        /// List theses summaries
        /// </summary>
        /// <remarks>
        /// Note: This endpoint might allow for filters in the future.
        /// </remarks>
        /// <returns>Success</returns>
        Task<ICollection<ThesisSummary>> ThesesAllAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new thesis for current user
        /// </summary>
        /// <returns>The thesis was created</returns>
        Task<ThesisResponse> ThesesPOSTAsync(Thesis body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get information for the thesis of the current user
        /// </summary>
        /// <returns>Success</returns>
        Task<ThesisResponse> MineGETAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Update information for the thesis of the current user
        /// </summary>
        /// <returns>Success</returns>
        Task<ThesisResponse> MinePUTAsync(Thesis body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get information for a specific thesis
        /// </summary>
        /// <param name="id">The thesis id</param>
        /// <returns>Success</returns>
        Task<ThesisResponse> ThesesGETAsync(long id, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update information for a specific thesis
        /// </summary>
        /// <param name="id">The thesis id</param>
        /// <returns>Success</returns>
        Task<ThesisResponse> ThesesPUTAsync(long id, Thesis body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Post a new comment for a specific thesis
        /// </summary>
        /// <param name="id">The thesis id</param>
        /// <returns>Success</returns>
        Task<CommentResponse> CommentsPOSTAsync(long id, Comment body, CancellationToken cancellationToken = default);

        /// <summary>
        /// List all comments for specific thesis
        /// </summary>
        /// <param name="id">The thesis id</param>
        /// <returns>Success</returns>
        Task<CommentListResponse> CommentsGETAsync(long id, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Route("api/v0")]
    public partial class ThesisController : ControllerBase
    {
        private IThesisController _implementation;

        public ThesisController(IThesisController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// List theses summaries
        /// </summary>
        /// <remarks>
        /// Note: This endpoint might allow for filters in the future.
        /// </remarks>
        /// <returns>Success</returns>
        [HttpGet, Route("theses")]
        public Task<ICollection<ThesisSummary>> ThesesAll(CancellationToken cancellationToken)
        {
            return _implementation.ThesesAllAsync(cancellationToken);
        }

        /// <summary>
        /// Create a new thesis for current user
        /// </summary>
        /// <returns>The thesis was created</returns>
        [HttpPost, Route("theses")]
        public Task<ThesisResponse> ThesesPOST([FromBody] Thesis body, CancellationToken cancellationToken)
        {
            return _implementation.ThesesPOSTAsync(body, cancellationToken);
        }

        /// <summary>
        /// Get information for the thesis of the current user
        /// </summary>
        /// <returns>Success</returns>
        [HttpGet, Route("theses/mine")]
        public Task<ThesisResponse> MineGET(CancellationToken cancellationToken)
        {
            return _implementation.MineGETAsync(cancellationToken);
        }

        /// <summary>
        /// Update information for the thesis of the current user
        /// </summary>
        /// <returns>Success</returns>
        [HttpPut, Route("theses/mine")]
        public Task<ThesisResponse> MinePUT([FromBody] Thesis body, CancellationToken cancellationToken)
        {
            return _implementation.MinePUTAsync(body, cancellationToken);
        }

        /// <summary>
        /// Get information for a specific thesis
        /// </summary>
        /// <param name="id">The thesis id</param>
        /// <returns>Success</returns>
        [HttpGet, Route("theses/{id}")]
        public Task<ThesisResponse> ThesesGET([BindRequired] long id, CancellationToken cancellationToken)
        {
            return _implementation.ThesesGETAsync(id, cancellationToken);
        }

        /// <summary>
        /// Update information for a specific thesis
        /// </summary>
        /// <param name="id">The thesis id</param>
        /// <returns>Success</returns>
        [HttpPut, Route("theses/{id}")]
        public Task<ThesisResponse> ThesesPUT([BindRequired] long id, [FromBody] Thesis body, CancellationToken cancellationToken)
        {
            return _implementation.ThesesPUTAsync(id, body, cancellationToken);
        }

        /// <summary>
        /// Post a new comment for a specific thesis
        /// </summary>
        /// <param name="id">The thesis id</param>
        /// <returns>Success</returns>
        [HttpPost, Route("theses/{id}/comments")]
        public Task<CommentResponse> CommentsPOST([BindRequired] long id, [FromBody] Comment body, CancellationToken cancellationToken)
        {
            return _implementation.CommentsPOSTAsync(id, body, cancellationToken);
        }

        /// <summary>
        /// List all comments for specific thesis
        /// </summary>
        /// <param name="id">The thesis id</param>
        /// <returns>Success</returns>
        [HttpGet, Route("theses/{id}/comments")]
        public Task<CommentListResponse> CommentsGET([BindRequired] long id, CancellationToken cancellationToken)
        {
            return _implementation.CommentsGETAsync(id, cancellationToken);
        }
    }
}
