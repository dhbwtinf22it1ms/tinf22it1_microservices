# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user_id import UserId  # noqa: F401,E501
from swagger_server.models.one_of_user_registration_status import OneOfUserRegistrationStatus  # noqa: F401,E501
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: UserId=None, registration_status: OneOfUserRegistrationStatus=None, first_name: str=None, last_name: str=None, email: str=None, role: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: UserId
        :param registration_status: The registration_status of this User.  # noqa: E501
        :type registration_status: OneOfUserRegistrationStatus
        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this User.  # noqa: E501
        :type last_name: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param role: The role of this User.  # noqa: E501
        :type role: str
        """
        self.swagger_types = {
            'id': UserId,
            'registration_status': OneOfUserRegistrationStatus,
            'first_name': str,
            'last_name': str,
            'email': str,
            'role': str
        }

        self.attribute_map = {
            'id': 'id',
            'registration_status': 'registrationStatus',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'email': 'email',
            'role': 'role'
        }
        self._id = id
        self._registration_status = registration_status
        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> UserId:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: UserId
        """
        return self._id

    @id.setter
    def id(self, id: UserId):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: UserId
        """

        self._id = id

    @property
    def registration_status(self) -> OneOfUserRegistrationStatus:
        """Gets the registration_status of this User.


        :return: The registration_status of this User.
        :rtype: OneOfUserRegistrationStatus
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status: OneOfUserRegistrationStatus):
        """Sets the registration_status of this User.


        :param registration_status: The registration_status of this User.
        :type registration_status: OneOfUserRegistrationStatus
        """

        self._registration_status = registration_status

    @property
    def first_name(self) -> str:
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def role(self) -> str:
        """Gets the role of this User.


        :return: The role of this User.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this User.


        :param role: The role of this User.
        :type role: str
        """
        allowed_values = ["student", "supervisor", "secretary", "administrator"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
