# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ThesisOperationalLocationAddress(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, street: str=None, zip_code: int=None, city: str=None, country: str=None):  # noqa: E501
        """ThesisOperationalLocationAddress - a model defined in Swagger

        :param street: The street of this ThesisOperationalLocationAddress.  # noqa: E501
        :type street: str
        :param zip_code: The zip_code of this ThesisOperationalLocationAddress.  # noqa: E501
        :type zip_code: int
        :param city: The city of this ThesisOperationalLocationAddress.  # noqa: E501
        :type city: str
        :param country: The country of this ThesisOperationalLocationAddress.  # noqa: E501
        :type country: str
        """
        self.swagger_types = {
            'street': str,
            'zip_code': int,
            'city': str,
            'country': str
        }

        self.attribute_map = {
            'street': 'street',
            'zip_code': 'zipCode',
            'city': 'city',
            'country': 'country'
        }
        self._street = street
        self._zip_code = zip_code
        self._city = city
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> 'ThesisOperationalLocationAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Thesis_operationalLocation_address of this ThesisOperationalLocationAddress.  # noqa: E501
        :rtype: ThesisOperationalLocationAddress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def street(self) -> str:
        """Gets the street of this ThesisOperationalLocationAddress.


        :return: The street of this ThesisOperationalLocationAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street: str):
        """Sets the street of this ThesisOperationalLocationAddress.


        :param street: The street of this ThesisOperationalLocationAddress.
        :type street: str
        """

        self._street = street

    @property
    def zip_code(self) -> int:
        """Gets the zip_code of this ThesisOperationalLocationAddress.


        :return: The zip_code of this ThesisOperationalLocationAddress.
        :rtype: int
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code: int):
        """Sets the zip_code of this ThesisOperationalLocationAddress.


        :param zip_code: The zip_code of this ThesisOperationalLocationAddress.
        :type zip_code: int
        """

        self._zip_code = zip_code

    @property
    def city(self) -> str:
        """Gets the city of this ThesisOperationalLocationAddress.


        :return: The city of this ThesisOperationalLocationAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this ThesisOperationalLocationAddress.


        :param city: The city of this ThesisOperationalLocationAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self) -> str:
        """Gets the country of this ThesisOperationalLocationAddress.


        :return: The country of this ThesisOperationalLocationAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this ThesisOperationalLocationAddress.


        :param country: The country of this ThesisOperationalLocationAddress.
        :type country: str
        """

        self._country = country
