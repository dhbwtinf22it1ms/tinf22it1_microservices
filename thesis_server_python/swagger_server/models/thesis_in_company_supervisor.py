# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ThesisInCompanySupervisor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, title: str=None, academic_title: str=None, first_name: str=None, last_name: str=None, phone_number: str=None, email: str=None, academic_degree: str=None):  # noqa: E501
        """ThesisInCompanySupervisor - a model defined in Swagger

        :param title: The title of this ThesisInCompanySupervisor.  # noqa: E501
        :type title: str
        :param academic_title: The academic_title of this ThesisInCompanySupervisor.  # noqa: E501
        :type academic_title: str
        :param first_name: The first_name of this ThesisInCompanySupervisor.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this ThesisInCompanySupervisor.  # noqa: E501
        :type last_name: str
        :param phone_number: The phone_number of this ThesisInCompanySupervisor.  # noqa: E501
        :type phone_number: str
        :param email: The email of this ThesisInCompanySupervisor.  # noqa: E501
        :type email: str
        :param academic_degree: The academic_degree of this ThesisInCompanySupervisor.  # noqa: E501
        :type academic_degree: str
        """
        self.swagger_types = {
            'title': str,
            'academic_title': str,
            'first_name': str,
            'last_name': str,
            'phone_number': str,
            'email': str,
            'academic_degree': str
        }

        self.attribute_map = {
            'title': 'title',
            'academic_title': 'academicTitle',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'phone_number': 'phoneNumber',
            'email': 'email',
            'academic_degree': 'academicDegree'
        }
        self._title = title
        self._academic_title = academic_title
        self._first_name = first_name
        self._last_name = last_name
        self._phone_number = phone_number
        self._email = email
        self._academic_degree = academic_degree

    @classmethod
    def from_dict(cls, dikt) -> 'ThesisInCompanySupervisor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Thesis_inCompanySupervisor of this ThesisInCompanySupervisor.  # noqa: E501
        :rtype: ThesisInCompanySupervisor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """Gets the title of this ThesisInCompanySupervisor.


        :return: The title of this ThesisInCompanySupervisor.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this ThesisInCompanySupervisor.


        :param title: The title of this ThesisInCompanySupervisor.
        :type title: str
        """

        self._title = title

    @property
    def academic_title(self) -> str:
        """Gets the academic_title of this ThesisInCompanySupervisor.


        :return: The academic_title of this ThesisInCompanySupervisor.
        :rtype: str
        """
        return self._academic_title

    @academic_title.setter
    def academic_title(self, academic_title: str):
        """Sets the academic_title of this ThesisInCompanySupervisor.


        :param academic_title: The academic_title of this ThesisInCompanySupervisor.
        :type academic_title: str
        """

        self._academic_title = academic_title

    @property
    def first_name(self) -> str:
        """Gets the first_name of this ThesisInCompanySupervisor.


        :return: The first_name of this ThesisInCompanySupervisor.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this ThesisInCompanySupervisor.


        :param first_name: The first_name of this ThesisInCompanySupervisor.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this ThesisInCompanySupervisor.


        :return: The last_name of this ThesisInCompanySupervisor.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this ThesisInCompanySupervisor.


        :param last_name: The last_name of this ThesisInCompanySupervisor.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone_number(self) -> str:
        """Gets the phone_number of this ThesisInCompanySupervisor.


        :return: The phone_number of this ThesisInCompanySupervisor.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number: str):
        """Sets the phone_number of this ThesisInCompanySupervisor.


        :param phone_number: The phone_number of this ThesisInCompanySupervisor.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def email(self) -> str:
        """Gets the email of this ThesisInCompanySupervisor.


        :return: The email of this ThesisInCompanySupervisor.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this ThesisInCompanySupervisor.


        :param email: The email of this ThesisInCompanySupervisor.
        :type email: str
        """

        self._email = email

    @property
    def academic_degree(self) -> str:
        """Gets the academic_degree of this ThesisInCompanySupervisor.


        :return: The academic_degree of this ThesisInCompanySupervisor.
        :rtype: str
        """
        return self._academic_degree

    @academic_degree.setter
    def academic_degree(self, academic_degree: str):
        """Sets the academic_degree of this ThesisInCompanySupervisor.


        :param academic_degree: The academic_degree of this ThesisInCompanySupervisor.
        :type academic_degree: str
        """

        self._academic_degree = academic_degree
