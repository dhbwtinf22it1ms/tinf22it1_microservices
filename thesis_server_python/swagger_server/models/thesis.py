# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.thesis_id import ThesisId  # noqa: F401,E501
from swagger_server.models.thesis_in_company_supervisor import ThesisInCompanySupervisor  # noqa: F401,E501
from swagger_server.models.thesis_operational_location import ThesisOperationalLocation  # noqa: F401,E501
from swagger_server.models.thesis_partner_company import ThesisPartnerCompany  # noqa: F401,E501
from swagger_server.models.thesis_preparation_period import ThesisPreparationPeriod  # noqa: F401,E501
from swagger_server.models.thesis_student import ThesisStudent  # noqa: F401,E501
from swagger_server import util


class Thesis(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: ThesisId=None, topic: str=None, student: ThesisStudent=None, preparation_period: ThesisPreparationPeriod=None, partner_company: ThesisPartnerCompany=None, operational_location: ThesisOperationalLocation=None, in_company_supervisor: ThesisInCompanySupervisor=None, exclude_supervisors_from_companies: List[str]=None):  # noqa: E501
        """Thesis - a model defined in Swagger

        :param id: The id of this Thesis.  # noqa: E501
        :type id: ThesisId
        :param topic: The topic of this Thesis.  # noqa: E501
        :type topic: str
        :param student: The student of this Thesis.  # noqa: E501
        :type student: ThesisStudent
        :param preparation_period: The preparation_period of this Thesis.  # noqa: E501
        :type preparation_period: ThesisPreparationPeriod
        :param partner_company: The partner_company of this Thesis.  # noqa: E501
        :type partner_company: ThesisPartnerCompany
        :param operational_location: The operational_location of this Thesis.  # noqa: E501
        :type operational_location: ThesisOperationalLocation
        :param in_company_supervisor: The in_company_supervisor of this Thesis.  # noqa: E501
        :type in_company_supervisor: ThesisInCompanySupervisor
        :param exclude_supervisors_from_companies: The exclude_supervisors_from_companies of this Thesis.  # noqa: E501
        :type exclude_supervisors_from_companies: List[str]
        """
        self.swagger_types = {
            'id': ThesisId,
            'topic': str,
            'student': ThesisStudent,
            'preparation_period': ThesisPreparationPeriod,
            'partner_company': ThesisPartnerCompany,
            'operational_location': ThesisOperationalLocation,
            'in_company_supervisor': ThesisInCompanySupervisor,
            'exclude_supervisors_from_companies': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'topic': 'topic',
            'student': 'student',
            'preparation_period': 'preparationPeriod',
            'partner_company': 'partnerCompany',
            'operational_location': 'operationalLocation',
            'in_company_supervisor': 'inCompanySupervisor',
            'exclude_supervisors_from_companies': 'excludeSupervisorsFromCompanies'
        }
        self._id = id
        self._topic = topic
        self._student = student
        self._preparation_period = preparation_period
        self._partner_company = partner_company
        self._operational_location = operational_location
        self._in_company_supervisor = in_company_supervisor
        self._exclude_supervisors_from_companies = exclude_supervisors_from_companies

    @classmethod
    def from_dict(cls, dikt) -> 'Thesis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Thesis of this Thesis.  # noqa: E501
        :rtype: Thesis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> ThesisId:
        """Gets the id of this Thesis.


        :return: The id of this Thesis.
        :rtype: ThesisId
        """
        return self._id

    @id.setter
    def id(self, id: ThesisId):
        """Sets the id of this Thesis.


        :param id: The id of this Thesis.
        :type id: ThesisId
        """

        self._id = id

    @property
    def topic(self) -> str:
        """Gets the topic of this Thesis.


        :return: The topic of this Thesis.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic: str):
        """Sets the topic of this Thesis.


        :param topic: The topic of this Thesis.
        :type topic: str
        """

        self._topic = topic

    @property
    def student(self) -> ThesisStudent:
        """Gets the student of this Thesis.


        :return: The student of this Thesis.
        :rtype: ThesisStudent
        """
        return self._student

    @student.setter
    def student(self, student: ThesisStudent):
        """Sets the student of this Thesis.


        :param student: The student of this Thesis.
        :type student: ThesisStudent
        """

        self._student = student

    @property
    def preparation_period(self) -> ThesisPreparationPeriod:
        """Gets the preparation_period of this Thesis.


        :return: The preparation_period of this Thesis.
        :rtype: ThesisPreparationPeriod
        """
        return self._preparation_period

    @preparation_period.setter
    def preparation_period(self, preparation_period: ThesisPreparationPeriod):
        """Sets the preparation_period of this Thesis.


        :param preparation_period: The preparation_period of this Thesis.
        :type preparation_period: ThesisPreparationPeriod
        """

        self._preparation_period = preparation_period

    @property
    def partner_company(self) -> ThesisPartnerCompany:
        """Gets the partner_company of this Thesis.


        :return: The partner_company of this Thesis.
        :rtype: ThesisPartnerCompany
        """
        return self._partner_company

    @partner_company.setter
    def partner_company(self, partner_company: ThesisPartnerCompany):
        """Sets the partner_company of this Thesis.


        :param partner_company: The partner_company of this Thesis.
        :type partner_company: ThesisPartnerCompany
        """

        self._partner_company = partner_company

    @property
    def operational_location(self) -> ThesisOperationalLocation:
        """Gets the operational_location of this Thesis.


        :return: The operational_location of this Thesis.
        :rtype: ThesisOperationalLocation
        """
        return self._operational_location

    @operational_location.setter
    def operational_location(self, operational_location: ThesisOperationalLocation):
        """Sets the operational_location of this Thesis.


        :param operational_location: The operational_location of this Thesis.
        :type operational_location: ThesisOperationalLocation
        """

        self._operational_location = operational_location

    @property
    def in_company_supervisor(self) -> ThesisInCompanySupervisor:
        """Gets the in_company_supervisor of this Thesis.


        :return: The in_company_supervisor of this Thesis.
        :rtype: ThesisInCompanySupervisor
        """
        return self._in_company_supervisor

    @in_company_supervisor.setter
    def in_company_supervisor(self, in_company_supervisor: ThesisInCompanySupervisor):
        """Sets the in_company_supervisor of this Thesis.


        :param in_company_supervisor: The in_company_supervisor of this Thesis.
        :type in_company_supervisor: ThesisInCompanySupervisor
        """

        self._in_company_supervisor = in_company_supervisor

    @property
    def exclude_supervisors_from_companies(self) -> List[str]:
        """Gets the exclude_supervisors_from_companies of this Thesis.


        :return: The exclude_supervisors_from_companies of this Thesis.
        :rtype: List[str]
        """
        return self._exclude_supervisors_from_companies

    @exclude_supervisors_from_companies.setter
    def exclude_supervisors_from_companies(self, exclude_supervisors_from_companies: List[str]):
        """Sets the exclude_supervisors_from_companies of this Thesis.


        :param exclude_supervisors_from_companies: The exclude_supervisors_from_companies of this Thesis.
        :type exclude_supervisors_from_companies: List[str]
        """

        self._exclude_supervisors_from_companies = exclude_supervisors_from_companies
